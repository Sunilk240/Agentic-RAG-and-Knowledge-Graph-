# Render deployment configuration for Graph-Enhanced Agentic RAG system

services:
  # Main web service
  - type: web
    name: graph-rag-api
    env: python
    region: oregon  # Choose your preferred region
    plan: starter   # Can upgrade to standard/pro as needed
    buildCommand: pip install -r requirements.txt
    startCommand: python start_api.py
    autoDeploy: true
    envVars:
      - key: ENVIRONMENT
        value: production
      - key: LOG_LEVEL
        value: INFO
      - key: HOST
        value: 0.0.0.0
      - key: PORT
        fromService:
          type: web
          name: graph-rag-api
          property: port
      - key: NEO4J_URI
        sync: false  # Set manually in Render dashboard
      - key: NEO4J_USER
        sync: false  # Set manually in Render dashboard
      - key: NEO4J_PASSWORD
        sync: false  # Set manually in Render dashboard
      - key: NEO4J_DATABASE
        value: neo4j
      - key: CHROMA_HOST
        sync: false  # Set manually in Render dashboard
      - key: CHROMA_PORT
        value: 8000
      - key: CHROMA_COLLECTION_NAME
        value: documents
      - key: GEMINI_API_KEY
        sync: false  # Set manually in Render dashboard
      - key: GEMINI_MODEL
        value: gemini-2.0-flash-exp
      - key: GEMINI_TEMPERATURE
        value: 0.7
      - key: GEMINI_MAX_TOKENS
        value: 2048
      - key: EMBEDDING_MODEL
        value: all-MiniLM-L6-v2
      - key: EMBEDDING_DEVICE
        value: cpu
      - key: COORDINATOR_TIMEOUT
        value: 30
      - key: MAX_RETRIES
        value: 3
      - key: GRAPH_TRAVERSAL_DEPTH
        value: 3
      - key: MAX_ENTITIES_PER_QUERY
        value: 50
      - key: VECTOR_SEARCH_K
        value: 10
      - key: SIMILARITY_THRESHOLD
        value: 0.7
      - key: MAX_CONTEXT_LENGTH
        value: 4000
      - key: CITATION_FORMAT
        value: apa
    healthCheckPath: /health
    # Performance and scaling configuration
    numInstances: 1  # Start with 1, can scale up
    scaling:
      minInstances: 1
      maxInstances: 3
      targetMemoryPercent: 70
      targetCPUPercent: 70
    # Disk space for temporary files and caching
    disk:
      name: graph-rag-disk
      mountPath: /opt/render/project/tmp
      sizeGB: 1
    
databases:
  # Note: For production deployment, you would typically use:
  # - Neo4j AuraDB (cloud-hosted Neo4j)
  # - Hosted Chroma or Pinecone for vector storage
  # These need to be configured separately and connection details
  # added to the environment variables above