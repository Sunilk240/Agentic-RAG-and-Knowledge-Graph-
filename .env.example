# =============================================================================
# Graph-Enhanced Agentic RAG - Environment Configuration
# =============================================================================
# Copy this file to .env and fill in your actual values
# Never commit .env file to version control!

# =============================================================================
# ENVIRONMENT SETTINGS
# =============================================================================
ENVIRONMENT=development
# Options: development, production
# Set to 'production' when deploying to Render

HOST=0.0.0.0
# Host to bind the server to (0.0.0.0 for all interfaces)

PORT=8000
# Port to run the server on (Render will override this)

# =============================================================================
# NEO4J DATABASE (Required)
# =============================================================================
# Get these from Neo4j AuraDB (free tier available)
# Sign up at: https://console.neo4j.io/

NEO4J_URI=neo4j+s://your-instance.databases.neo4j.io
# Example: neo4j+s://12345678.databases.neo4j.io

NEO4J_USER=neo4j
# Default username is usually 'neo4j'

NEO4J_PASSWORD=your_auradb_password
# Password you set when creating the AuraDB instance

# =============================================================================
# VECTOR DATABASE (Choose one)
# =============================================================================
VECTOR_DB_TYPE=pinecone
# Options: pinecone, chroma
# Recommended: pinecone for production, chroma for development

# PINECONE SETTINGS (if using Pinecone)
PINECONE_API_KEY=your_pinecone_api_key
# Get from: https://www.pinecone.io/

PINECONE_INDEX_NAME=rag-documents
# Name of your Pinecone index (create this in Pinecone dashboard)

PINECONE_ENVIRONMENT=us-east-1-aws
# Pinecone environment (check your dashboard)

# CHROMA SETTINGS (if using Chroma - local development)
CHROMA_PERSIST_DIRECTORY=./chroma_db
# Local directory to store Chroma database

# =============================================================================
# AI MODEL SETTINGS
# =============================================================================
# GOOGLE GEMINI (Recommended - has free tier)
GEMINI_API_KEY=your_gemini_api_key
# Get from: https://ai.google.dev/

GEMINI_MODEL=gemini-2.0-flash-exp
# Model to use for text generation

# EMBEDDING MODEL
EMBEDDING_MODEL=all-MiniLM-L6-v2
# Sentence transformer model for embeddings

# =============================================================================
# API CONFIGURATION
# =============================================================================
# CORS Settings
CORS_ORIGINS=["*"]
# Allowed origins for CORS (use specific domains in production)

CORS_METHODS=["GET", "POST", "PUT", "DELETE"]
# Allowed HTTP methods

CORS_HEADERS=["*"]
# Allowed headers

# Rate Limiting
MAX_REQUESTS_PER_MINUTE=100
# Maximum API requests per minute per IP

# =============================================================================
# LOGGING
# =============================================================================
LOG_LEVEL=INFO
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL

LOG_FORMAT=%(asctime)s - %(name)s - %(levelname)s - %(message)s
# Log message format

# =============================================================================
# ADMIN SETTINGS
# =============================================================================
# Admin portal credentials (change these!)
ADMIN_USERNAME=Sunil
ADMIN_PASSWORD=test0663

# =============================================================================
# DEPLOYMENT NOTES
# =============================================================================
# For Render deployment:
# 1. Set ENVIRONMENT=production
# 2. Use Neo4j AuraDB for NEO4J_URI
# 3. Use Pinecone for vector database
# 4. Set all API keys in Render environment variables
# 5. Never commit .env file to git!

# For local development:
# 1. Set ENVIRONMENT=development  
# 2. Can use local Neo4j or AuraDB
# 3. Can use Chroma for vector database
# 4. Copy this file to .env and fill in values